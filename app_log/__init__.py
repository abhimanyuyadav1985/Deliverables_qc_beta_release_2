import logging
import time
import socket
import os
from functools import wraps

stream_formatter = '%(asctime)s %(levelname)-8s %(message)s'

def get_log_level():
    """
    Gets the log level from ~/manual_overrides/logging_level
    this is setup this way so that users can override the logging level for trouble shooting purposes
    :return: log_level
    """
    log_level_dict = {
        'DEBUG' : logging.DEBUG,
        'INFO' : logging.INFO,
        'WARNING' : logging.WARNING,
        'ERROR' : logging.ERROR,
        'CRITICAL' : logging.CRITICAL
    }
    log_level = log_level_dict['INFO']
    try:
        file_path = os.path.join(os.getcwd(),'manual_overrides','logging_level')
        file_handler = open(file_path, 'rb')
        for a_line in file_handler.readlines():
            if '#' in a_line:
                pass
            elif 'logging_level' in a_line:
                try:
                    log_level = log_level_dict[a_line.split('=')[1].rstrip(' ')]
                except:
                    pass

        return log_level
    except:
        return log_level


def setup_logging():
    log_level = get_log_level()
    # create the log dir if not present
    log_dir = os.path.join(os.getcwd(), 'logs')
    try:
        os.stat(log_dir)
    except:
        os.mkdir(log_dir)
    # create the log file and add the 1st string to it

    log_name = time.strftime("app_" + "%Y%m%d-%H%M%S") + '.log'
    log_path = os.path.join(log_dir, log_name)
    file_handler = open(log_path, 'wb')
    file_handler.write('Autogenerated log file created on : ' + time.strftime('%a, %d %b %Y %H:%M:%S') + '\n')
    ip = socket.gethostbyname(socket.gethostname())
    file_handler.write("System IP address : " + ip + '\n')
    file_handler.write('-' * 80 + '\n')
    file_handler.close()
    logging.basicConfig(level=log_level,
                    format='%(asctime)s %(name)-60s %(levelname)-10s %(message)s',
                    filename= log_path,
                    filemode='a')

